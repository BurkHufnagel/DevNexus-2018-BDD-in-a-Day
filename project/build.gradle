buildscript {
	ext {
		springBootVersion = '1.5.9.RELEASE'
	}
	repositories {
		mavenCentral()
        maven { url 'https://repo.spring.io/libs-snapshot' }
        jcenter()
	}
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.4.2'
    }
}

apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
//apply plugin: 'findbugs'
apply plugin: 'org.unbroken-dome.test-sets'


group = 'com.bddinaday'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8


ext {
	ext {
		groovyVersion = '2.4.12'
		gebVersion = '2.1'
		seleniumVersion = '2.25.0'
		chromeDriverVersion = '2.32'
	}
}


repositories {
	mavenCentral()
}


tasks.withType(FindBugs) {
	reports {
		xml.enabled false
		html.enabled true
	}
}


dependencies {
	compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
	compile "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
	runtime 'org.springframework.boot:spring-boot-devtools'

    compile 'org.slf4j:jul-to-slf4j'
    compile 'javax.servlet:javax.servlet-api:4.0.0-b07'

	//FindBugs
    //compileOnly 'com.google.code.findbugs:annotations:3.0.1'
    //compileOnly 'com.google.code.findbugs:jsr305:3.0.1'

	testCompile('org.springframework.boot:spring-boot-starter-test')

    // Test dependencies (Spock & Geb)
    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
    testCompile 'org.spockframework:spock-spring:+'
    testCompile 'com.athaydes:spock-reports:1.3.1'
    testRuntime 'org.objenesis:objenesis:2.5.1'
    testRuntime 'net.bytebuddy:byte-buddy:1.6.5'
    testCompile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile "io.github.bonigarcia:webdrivermanager:1.4.8"
}


//test {
//    enabled = false
//
//    maxHeapSize = "1g"
//    jvmArgs '-XX:MaxMetaspaceSize=128m'
//    testLogging {
//        exceptionFormat = 'full'
//    }
//}


// Might be able to move this into functionalTest
tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.memoryMaximumSize = '256m'
}


// This lets us store different types of tests in different directories
testSets {
	integrationTest
	functionalTest
}


functionalTest {
    systemProperty "geb.env", 'chrome'
}


// Unit tests should be run every time we build.
build.dependsOn test


tasks.withType(Test) {
	reports.html.destination = file("${reporting.baseDir}/${name}")
	println("eports.html.destination = '" + "${reporting.baseDir}/${name}" + "'")

	systemProperty "env", System.getProperty("env") // Useful for passing environment variables to the app
}


def webappDir = "$projectDir/src/main/webapp"
sourceSets {
	main {
		resources {
			srcDirs = ["$webappDir/dist", "$projectDir/src/main/resources"]
		}
	}
}


processResources {
// Uncomment to do this every time
	dependsOn "buildAngular"
}


task buildAngular(type:Exec) {
	dependsOn "installAngular"
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = BasePlugin.BUILD_GROUP
//	outputs.dir "$webappDir/dist"
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "ng.cmd", "build"
	} else {
		commandLine "ng", "build"
	}
}


task installAngular(type:Exec) {
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = BasePlugin.BUILD_GROUP
//	outputs.dir "$webappDir/dist"
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "npm.cmd", "install"
	} else {
		commandLine "npm", "install"
	}
}
